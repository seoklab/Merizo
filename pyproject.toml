[build-system]
requires = ["setuptools>=61"]
build-backend = "setuptools.build_meta"

[project]
name = "Merizo"
version = "0.0.0"
description = " Merizo "
readme = "README.md"
requires-python = "==3.11.11"
maintainers = [{ name = "Hyeonsung Byeon", email = "hsbyeon1@snu.ac.kr" }]

[project.urls]
repository = "https://github.com/seoklab/Merizo.git"

[project.optional-dependencies]
test = ["pytest"]

[tool.setuptools.packages.find]
where = ["src"]

[tool.ruff]
line-length = 79

target-version = "py311"

src = ["src"]
extend-include = ["*.pyi", "*.ipynb"]
extend-exclude = [".github/**", "*.pyc"]

[tool.ruff.lint]
extend-select = [
    "W6",
    "I",
    "N80",
    "S102",
    "S108",
    "S306",
    "S307",
    "S60",
    "B",
    "A",
    "PT",
    "PTH",
    "PLE",
    "PLW",
    "NPY",
    "RUF",
]
ignore = [
    "E74",
    "F403",
    "F405",
    "N803",
    "N806",
    "S603",
    "S607",
    "B008",
    "B905",
    "PTH123",
    "PLW2901",
]

dummy-variable-rgx = "^_$"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.lint.isort]
no-lines-before = ["local-folder"]

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = true
mark-parentheses = true

[tool.mypy]
files = ["src/model/", "scripts/"]
mypy_path = "$MYPY_CONFIG_FILE_DIR/src"

plugins = ["pydantic.mypy"]

check_untyped_defs = true
disallow_any_explicit = true
disallow_any_generics = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unreachable = true

allow_redefinition = true
local_partial_types = true
disable_error_code = ["import-untyped", "no-redef"]

show_error_context = true
show_column_numbers = true

[[tool.mypy.overrides]]
module = ["rdkit.*", "lightning.*", "Bio.*"]

follow_imports = "skip"
follow_imports_for_stubs = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true

[tool.pytest.ini_options]
testpaths = ["tests"]

[tool.coverage.run]
command_line = "-m pytest -v -s"
branch = true
relative_files = true
dynamic_context = "test_function"
source = ["src"]

[tool.coverage.report]
skip_covered = true
skip_empty = true
sort = "-cover"
exclude_also = [
    "def __repr__",
    "@abstractmethod",
    "if __name__ == ['\"]__main__['\"]:",
]

[tool.coverage.html]
show_contexts = true
skip_covered = false
skip_empty = true

[tool.pyright]
include = ["src", "tests", "scripts"]
pythonVersion = "3.11"
pythonPlatform = "Linux"

strictParameterNoneValue = false

reportGeneralTypeIssues = "information"
reportUnusedImport = "warning"
reportUnusedClass = "warning"
reportUnusedFunction = "warning"
reportUnusedVariable = "warning"
reportDuplicateImport = "warning"
reportWildcardImportFromLibrary = "none"
reportOptionalSubscript = "warning"
reportOptionalMemberAccess = "warning"
reportOptionalCall = "warning"
reportOptionalIterable = "warning"
reportOptionalContextManager = "warning"
reportOptionalOperand = "warning"
reportPrivateImportUsage = "none"
reportIncompatibleMethodOverride = "none"
reportIncompatibleVariableOverride = "warning"
reportInconsistentConstructor = "warning"
reportOverlappingOverload = "warning"
reportUninitializedInstanceVariable = "warning"
reportInvalidStringEscapeSequence = "error"
reportUnnecessaryIsInstance = "warning"
reportUnnecessaryCast = "warning"
reportUnnecessaryComparison = "warning"
reportUnnecessaryContains = "warning"
reportAssertAlwaysTrue = "warning"
reportSelfClsParameterName = "warning"
reportImplicitStringConcatenation = "information"
reportInvalidStubStatement = "warning"
reportIncompleteStub = "warning"
reportUnnecessaryTypeIgnoreComment = "none"
reportMatchNotExhaustive = "warning"
reportShadowedImports = "warning"
reportPossiblyUnboundVariable = "none"

# Covered by mypy
reportAssignmentType = "none"
reportAttributeAccessIssue = "none"
reportArgumentType = "none"
reportCallIssue = "none"
reportReturnType = "none"